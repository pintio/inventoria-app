import express, { Request } from "express";
import { sql, ValueExpression } from "slonik";

// db pool
import psqlDb from "../db";

//data and Types
import { suppliers } from "../api/dbschema";
import { ColumnName, ForeignKey, TableData } from "../api/types/table";

const router = express.Router();

// to get column names and types
router.get("/suppliersdata", async (req, res) => {
  try {
    // const { data, error } = await psqlDb.from("categories").select("*");
    (await psqlDb).connect(async (connection) => {
      const columnData = await connection.query(
        sql<queries.Column>`SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'suppliers';`
      );
      let tableData: TableData = {
        columns: columnData.rows as unknown as ColumnName[],
        primary_key: suppliers.primaryKey,
        foreign_keys: suppliers.foreignKeys as unknown as ForeignKey,
      };

      res.status(203).send(tableData);
    });
  } catch (e) {
    console.log(e);
  }
});

router.get("/allsuppliers", async (req, res) => {
  try {
    (await psqlDb).connect(async (connection) => {
      const data = await connection.query(sql<queries.Supplier>`SELECT * FROM suppliers`);

      if (data) res.status(203).send(data);
      else res.sendStatus(404);
    });
  } catch (e) {
    res.status(404).send(e);
    console.log(e);
  }
});

// // to get only one category matching the id
// router.get(
//   "/api/get/supplier/:id",
//   async (req: Request<{ id: number }>, res) => {
//     try {
//       const { data, error } = await psqlDb
//         .from("suppliers")
//         .select("*")
//         .match({ s_id: req.params.id });
//       res.send(data);
//     } catch (e) {
//       console.log(e);
//     }
//   }
// );

router.post(
  "/supplier/:name",
  async (req: Request<{ name: ValueExpression }>, res) => {
    try {
      (await psqlDb).connect(async (connection) => {
        await connection.query(
          sql`INSERT INTO suppliers(supplier_name) VALUES(${req.params.name})`
        );
        res.sendStatus(203);
      });
    } catch (error) {
      res.status(404).send(error);
      console.log(error, "error while adding a new supplier");
    }
  }
);

router.delete(
  "/supplier/:id",
  async (req: Request<{ id: ValueExpression }>, res) => {
    try {
      (await psqlDb).connect(async (connection) => {
        await connection.query(
          sql`DELETE FROM suppliers WHERE id = ${req.params.id}`
        );
        res.sendStatus(204);
      });
    } catch (error) {
      res.status(404).send(error);
      console.log(error, "error while deleting a supplier");
    }
  }
);

module.exports = router;

export declare namespace queries {
    // Generated by @slonik/typegen

    /** - query: `SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'suppliers';` */
    export interface Column {

        /** column: `information_schema.columns.column_name`, regtype: `name` */
        column_name: (string) | null;

        /** column: `information_schema.columns.data_type`, regtype: `character varying` */
        data_type: (string) | null;
    }

    /** - query: `SELECT * FROM suppliers` */
    export interface Supplier {

        /** column: `public.suppliers.id`, not null: `true`, regtype: `integer` */
        id: number;

        /** column: `public.suppliers.supplier_name`, regtype: `text` */
        supplier_name: (string) | null;
    }
}
