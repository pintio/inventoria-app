import express, { Request } from "express";
import psqlDb from "../db";

// const multer = require("multer");

// const upload = multer();

// data
import { users } from "../api/dbschema";
import { sql } from "slonik";

const router = express.Router();

// router.get("/api/get/userColumnNames", async (req, res) => {
//   const columnArr: { column_name: string; type: string }[] = [
//     { column_name: "serial_number", type: "number" },
//     { column_name: "user_name", type: "text" },
//     { column_name: "company", type: "text" },
//     { column_name: "full_name", type: "text" },
//     { column_name: "position", type: "text" },
//     { column_name: "joining_date", type: "text" },
//   ];
//   res.send(columnArr);
// });

router.get("/userscolumns", async (req, res) => {
  const columnArr = users.columns;
  if (columnArr) res.status(204).send(columnArr);
  else res.sendStatus(404);
});

// to get only one user matching the id
router.get("/user/:id", async (req: Request<{ id: number }>, res) => {
  try {
    (await psqlDb).connect(async (connection) => {
      const data = await connection.query(
        sql<queries.User>`SELECT * FROM users WHERE unique_id = ${req.params.id}`
      );

      if (data) res.status(203).send(data);
      else res.sendStatus(404);
    });
  } catch (e) {
    console.log(e);
  }
});

router.get("/currentuser", async (req: Request<{ id: number }>, res) => {
  const user = req.app.locals.user;
  console.log("getting current user", req.app.locals.user);
  res.send(user);
  // try {
  //   (await psqlDb).connect(async (connection) => {
  //     const data = await connection.query(
  //       sql<queries.User>`SELECT * FROM users WHERE unique_id = ${req.params.id}`
  //     );

  //     if (data) res.status(203).send(data);
  //     else res.sendStatus(404);
  //   });
  // } catch (e) {
  //   console.log(e);
  // }
});

router.get("/allusers", async (req, res) => {
  try {
    (await psqlDb).connect(async (connection) => {
      const data = await connection.query(
        sql<queries.User>`SELECT * FROM users`
      );

      if (data) res.status(203).send(data);
      else res.sendStatus(404);
    });
  } catch (e) {
    res.status(404).send(e);
    console.log(e);
  }
});

router.post("/user", async (req, res) => {
  const date = new Date();
  const today = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`;

  try {
    (await psqlDb).connect(async (connection) => {
      const data = await connection.query(
        sql`INSERT INTO users(email_id, username, fullname, position, joining_date) VALUES(${req.body.email_id}, ${req.body.username}, ${req.body.fullname}, ${req.body.position}, ${today})`
      );

      if (data) res.status(203).send(data);
      else res.sendStatus(404);
    });
  } catch (error) {
    console.log(error);
  }
});

// router.post(
//   "/api/add/user/:email&:uuid",
//   upload.any(),
//   async (req: Request<{ email: string; uuid: string }>, res) => {
//     const date = new Date();
//     const today = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`;

//     try {
//       const { data, error } = await psqlDb.from("users").insert({
//         company: req.body.companyname,
//         position: req.body.position,
//         joining_date: today,
//         full_name: req.body.fullname,
//         uid: req.params.uuid,
//         email_id: req.params.email,
//         address: req.body.address,
//       });
//       if (error) console.log(error, "while making a new user");
//     } catch (error) {}

//     try {
//       const file = req.file as any;
//       console.log(file, "image File");
//       const companyName = req.body.companyname;
//       const { data, error } = await psqlDb.storage
//         .from("inventory")
//         .upload(`public/${companyName}.png`, file);

//       if (error) {
//         console.log(error, "while uploading the logo");
//         res.send(400);
//       } else {
//         res.sendStatus(200);
//         res.redirect("/app");
//       }
//     } catch (error) {}
//   }
// );

// router.delete(
//   "/api/delete/user/:userId",
//   async (req: Request<{ userId: number }>, res) => {
//     try {
//       const { data, error } = await psqlDb
//         .from("users")
//         .delete()
//         .match({ user_id: req.params.userId });

//       if (error) console.log(error, "user route 3");
//     } catch (error) {
//       console.log(error);
//     }
//   }
// );

// router.post("/api/get/user", async (req, res) => {
//   console.log(req, "cookies");
//   const { user } = await psqlDb.auth.api.getUserByCookie(req);
//   console.log(user, "user");
//   res.send(req.cookies);
//   // res.send(user);
// });

export declare namespace queries {
  // Generated by @slonik/typegen

  /** - query: `SELECT * FROM users` */
  export interface User {
    /** column: `public.users.id`, not null: `true`, regtype: `integer` */
    id: number;

    /** column: `public.users.fullname`, regtype: `text` */
    fullname: string | null;

    /** column: `public.users.position`, regtype: `text` */
    position: string | null;

    /** column: `public.users.joining_date`, regtype: `date` */
    joining_date: unknown;

    /** column: `public.users.password`, not null: `true`, regtype: `text` */
    password: string;

    /** column: `public.users.username`, not null: `true`, regtype: `text` */
    username: string;

    /** column: `public.users.email_id`, not null: `true`, regtype: `text` */
    email_id: string;
  }
}

module.exports = router;
