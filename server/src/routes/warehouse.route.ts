import express, { Request } from "express";

// db pool
import psqlDb from "../db";

// types and data
import { warehouses } from "../api/dbschema";
import { sql, ValueExpression } from "slonik";
import { ColumnName, ForeignKey, TableData } from "../api/types/table";

const router = express.Router();

// API

// to get column names and types
router.get("/warehousedata", async (req, res) => {
  try {
    // const { data, error } = await psqlDb.from("categories").select("*");
    (await psqlDb).connect(async (connection) => {
      const columnData = await connection.query(
        sql<queries.Column>`SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'warehouses';`
      );
      let tableData: TableData = {
        columns: columnData.rows as unknown as ColumnName[],
        primary_key: warehouses.primaryKey,
        foreign_keys: warehouses.foreignKeys as unknown as ForeignKey,
      };

      res.status(203).send(tableData);
    });
  } catch (e) {
    console.log(e);
  }
});

router.get("/allwarehouses", async (req, res) => {
  try {
    (await psqlDb).connect(async (connection) => {
      const data = await connection.query(sql<queries.Warehouse>`SELECT * FROM warehouses`);

      if (data) res.status(203).send(data);
      else res.sendStatus(404);
    });
  } catch (e) {
    res.status(404).send(e);
    console.log(e);
  }
});

// to get only one wh matching the id
router.get("/warehouse/:id", async (req: Request<{ id: number }>, res) => {
  try {
    (await psqlDb).connect(async (connection) => {
      const data = await connection.query(
        sql<queries.Warehouse>`SELECT * FROM warehouses WHERE ID = ${req.params.id}`
      );

      if (data) res.status(203).send(data.rows);
      else res.sendStatus(404);
    });
  } catch (e) {
    res.status(404).send(e);
    console.log(e, "error while posting a fetching a row from warehouse table");
  }
});

router.post(
  "/warehouse/:name",
  async (req: Request<{ name: ValueExpression }>, res) => {
    try {
      (await psqlDb).connect(async (connection) => {
        await connection.query(
          sql`INSERT INTO warehouses(warehouse_name) VALUES(${req.params.name})`
        );
        res.sendStatus(203);
      });
    } catch (error) {
      res.status(404).send(error);
      console.log(error, "error while adding a new warehouse");
    }
  }
);

router.delete(
  "/warehouse/:id",
  async (req: Request<{ id: ValueExpression }>, res) => {
    try {
      (await psqlDb).connect(async (connection) => {
        await connection.query(
          sql`DELETE FROM warehouses WHERE id = ${req.params.id}`
        );
        res.sendStatus(204);
      });
    } catch (error) {
      res.status(404).send(error);
      console.log(error, "error while deleting a warehouse");
    }
  }
);

module.exports = router;

export declare namespace queries {
    // Generated by @slonik/typegen

    /** - query: `SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'warehouses';` */
    export interface Column {

        /** column: `information_schema.columns.column_name`, regtype: `name` */
        column_name: (string) | null;

        /** column: `information_schema.columns.data_type`, regtype: `character varying` */
        data_type: (string) | null;
    }

    /**
    * queries:
    * - `SELECT * FROM warehouses`
    * - `SELECT * FROM warehouses WHERE ID = $1`
    */
    export interface Warehouse {

        /** column: `public.warehouses.id`, not null: `true`, regtype: `integer` */
        id: number;

        /** column: `public.warehouses.warehouse_name`, regtype: `text` */
        warehouse_name: (string) | null;
    }
}
