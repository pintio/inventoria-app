import express, { Request, Response } from "express";
import { sql, ValueExpression } from "slonik";

// database pool
import psqlDb from "../db";

// column names
import { categories } from "../api/dbschema";
import { ColumnName, ForeignKey, TableData } from "../api/types/table";

// to get column names and types
async function categoriesData(req: Request, res: Response) {
  try {
    (await psqlDb).connect(async (connection) => {
      const columnData = await connection.query(
        sql<queries.Column>`SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'categories';`
      );

      let tableData: TableData = {
        columns: columnData.rows as unknown as ColumnName[],
        primary_key: categories.primaryKey,
        foreign_keys: categories.foreignKeys as unknown as ForeignKey,
      };

      res.status(203).send(tableData);
    });
  } catch (e) {
    res.status(404).send(e);
    console.log(e, "error while fetching categoriesdata");
  }
}

// to get only one category matching the id
async function getCategoryById(req: Request<{ id: number }>, res: Response) {
  try {
    (await psqlDb).connect(async (connection) => {
      const data = await connection.query(
        sql`SELECT * FROM catagories WHERE ID = ${req.params.id}`
      );

      if (data) res.status(203).send(data.rows);
      else res.sendStatus(404);
    });
  } catch (e) {
    res.status(404).send(e);
    console.log(
      e,
      "error while posting a fetching a row from categories table"
    );
  }
}

// to get all categories
async function getAllCategories(req: Request, res: Response) {
  try {
    (await psqlDb).connect(async (connection) => {
      const categories = await connection.query(
        sql<queries.Category>`SELECT * FROM categories`
      );
      res.status(203).send(categories.rows);
    });
  } catch (e) {
    res.status(404).send(e);
    console.log(
      e,
      "error while posting a fetching all rows from categories table"
    );
  }
}

// Adding new category
async function postCategory(
  req: Request<{ name: ValueExpression }>,
  res: Response
) {
  try {
    (await psqlDb).connect(async (connection) => {
      const workspace_id = req.app.locals.user.workspace_id;

      await connection.query(
        sql`INSERT INTO categories(category_name, workspace_id) VALUES(${req.params.name}, ${workspace_id})`
      );
    });

    res.status(204).send();
  } catch (e) {
    res.status(404).send(e);
    console.log(e, "error while posting a new category");
  }
}

// Deleting a category
async function deleteCategory(
  req: Request<{ id: ValueExpression }>,
  res: Response
) {
  try {
    (await psqlDb).connect(async (connection) => {
      await connection.query(
        sql`DELETE FROM categories WHERE id = ${req.params.id}`
      );
    });

    res.sendStatus(204);
  } catch (e) {
    res.status(404).send(e);
    console.log(e);
  }
}

export {
  categoriesData,
  getAllCategories,
  getCategoryById,
  postCategory,
  deleteCategory,
};

export declare namespace queries {
  // Generated by @slonik/typegen

  /** - query: `SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'categories';` */
  export interface Column {
    /** column: `information_schema.columns.column_name`, regtype: `name` */
    column_name: string | null;

    /** column: `information_schema.columns.data_type`, regtype: `character varying` */
    data_type: string | null;
  }

  /** - query: `SELECT * FROM categories` */
  export interface Category {
    /** column: `public.categories.id`, not null: `true`, regtype: `integer` */
    id: number;

    /** column: `public.categories.category_name`, regtype: `text` */
    category_name: string | null;
  }
}
